

// - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
//
// {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//              lat: '-37.3159',
//              lng: '81.1496'
//          }
// },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//     name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
// }
// }
class Creator {
    constructor(id, name, username, email, street, suite, city, zipcode, lat, lng, phone, website, companyName, companyCatchPhrase, companyBS) {
        this.id = id;
        this.name = name;
        this.username = username;
        this.email = email;
        this.address = {
            street: street,
            suite: suite,
            city: city,
            zipcode: zipcode,
            geo: {
                lat: lat,
                lng: lng,
            }
        };
        this.phone = phone;
        this.website = website;
        this.companyCatchPhrase = {
            companyName: companyName,
            companyCatchPhrase: companyCatchPhrase,
            companyBS: companyBS,
        };
    }
}

let item = new Creator(1, 'Leanne Graham', 'Bret', 'Sincere@april.biz', 'Kulas Light',
    'Apt. 556', 'Gwenborough', '92998-3874', '-37.3159', '81.1496', '1-770-736-8031 x56442',
    'hildegard.org', 'Romaguera-Crona', 'Multi-layered client-server neural-net',
    'harness real-time e-markets');
console.log(item);



// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//     -назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select
// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//     action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//     {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//     {/*some props and values*/},
//     {/*...*/},
//     {/*...*/},
// ]
// }
class TagConstructor {
    constructor(titleOfTag, action, titleOfAttr1, actionOfAttr1, titleOfAttr2, actionOfAttr2) {
        this.titleOfTag = titleOfTag;
        this.action = action;
        this.attr = [
            {
                titleOfAttr: titleOfAttr1,
                actionOfAttr: actionOfAttr1,
            },
            {
                titleOfAttr: titleOfAttr2,
                actionOfAttr: actionOfAttr2,
            },
        ];
    }
}

let a = new TagConstructor('a', 'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. ' +
    'В зависимости от присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, ' +
    'которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход' +
    'к закладке внутри веб-страницы.', 'accesskey','Активация ссылки с помощью комбинации клавиш.',
    'href','Задает адрес документа, на который следует перейти.');
let div = new TagConstructor('div', 'Элемент <div> является блочным элементом и предназначен для выделения фрагмента ' +
    'документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз ' +
    'стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.', 'align',
    'Задает выравнивание содержимого тега <div>.','title','Добавляет всплывающую подсказку к содержимому.');
let h1 = new TagConstructor('h1', 'представляет собой наиболее важный заголовок первого уровня, По умолчанию, заголовок ' +
    'первого уровня отображается самым крупным шрифтом жирного начертания', 'align', 'Определяет выравнивание заголовка.',
    'class', 'Определяет имя класса, которое позволяет связать тег со стилевым оформлением.');
let span = new TagConstructor('span', 'Тег <span> предназначен для определения строчных элементов документа.', 'contenteditable',
    'Сообщает, что элемент доступен для редактирования пользователем.', 'contextmenu', 'Устанавливает контекстное меню для элемента.');
let input = new TagConstructor('input', 'Тег <input> является одним из разносторонних элементов формы и позволяет создавать ' +
    'разные элементы интерфейса и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, ' +
    'различных кнопок, переключателей и флажков.', 'autocomplete', 'Включает или отключает автозаполнение.',
    'autofocus', 'Устанавливает фокус в поле формы.');
let form = new TagConstructor('form', 'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными ' +
    'между пользователем и сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить ' +
    'доступ к любому элементу формы, изменять его и применять по своему усмотрению.', 'accept-charset',
    'Устанавливает кодировку, в которой сервер может принимать и обрабатывать данные.', 'action', '' +
    'Адрес программы или документа, который обрабатывает данные формы.');
let option = new TagConstructor('option', 'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. ' +
    'Ширина списка определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если планируется отправлять ' +
    'данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
    'disabled', 'Заблокировать для доступа элемент списка.', 'label', 'Указание метки пункта списка.');
let select = new TagConstructor('select', 'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, ' +
    'а также список с одним или множественным выбором', 'accesskey', 'Позволяет перейти к списку с помощью некоторого сочетания клавиш.',
    'autofocus', 'Устанавливает, что список получает фокус после загрузки страницы');
console.log(a, div, h1, span, input, form, option, select);



